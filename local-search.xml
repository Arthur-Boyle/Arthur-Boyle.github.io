<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>常用设计模式</title>
    <link href="/2024/09/08/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/09/08/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs smali">public class PreloadSingleton &#123;<br>    <span class="hljs-keyword"> private</span><span class="hljs-keyword"> static</span> PreloadSingleton<span class="hljs-built_in"> instance </span>=<span class="hljs-built_in"> new </span>PreloadSingleton();<br><br>     //私有化构造函数<br>    <span class="hljs-keyword"> private</span> PreloadSingleton()&#123;&#125;;<br><br>    <span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span> PreloadSingleton getInstance()&#123;<br>        <span class="hljs-built_in"> return </span>instance;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缺点：可能会浪费内存，因为没有使用该对象时，就已经加载到内存。</p><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs smali">public class LazySingleton &#123;<br>   <span class="hljs-keyword"> private</span><span class="hljs-keyword"> static</span> <span class="hljs-class">LazySingleton instance = null;</span><br><br>   <span class="hljs-keyword"> private</span> LazySingleton()&#123;&#125;;<br><br>   <span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span> LazySingleton getInstance()&#123;<br>        if(instance == null)&#123;<br>           <span class="hljs-built_in"> instance </span>=<span class="hljs-built_in"> new </span>LazySingleton();<br>        &#125;<br>       <span class="hljs-built_in"> return </span>instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缺点：可能出现线程安全问题，if操作时可能多个线程同时进入。指令重排也可能让线程拿到未初始化的对象。</p><h3 id="双检索单例模式"><a href="#双检索单例模式" class="headerlink" title="双检索单例模式"></a>双检索单例模式</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> &#123;<br>    <span class="hljs-comment">// volatile 确保可见性，防止指令重排序</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br><br>    <span class="hljs-comment">// 私有构造函数，防止外部直接实例化</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span>()</span> &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-comment">// 提供对外获取实例的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span>()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 第一次检查</span><br>            synchronized (Singleton.<span class="hljs-keyword">class</span>) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 第二次检查</span><br>                    instance = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>volatile</code>关键字</strong>：</p><p><code>volatile</code>关键字，确保多线程环境中对该变量的写操作能够立刻被其他线程可见，并防止 JVM 的指令重排序优化。在没有<code>volatile</code>的情况下，可能会发生以下情况：</p><ul><li>线程A部分初始化了 <code>Singleton</code> 对象，但尚未完全构造好对象的状态。</li><li>线程B看到非空的 <code>instance</code>，但却获取到了未完全初始化的对象。</li></ul><p>使用 <code>volatile</code> 关键字避免了这种情况。</p><p><strong>双重检查锁定</strong>：</p><ul><li><strong>第一次检查</strong>：在进入同步块之前，检查 <code>instance</code> 是否为空。如果不为空，直接返回实例，避免每次都进入同步块，提升性能。</li><li><strong>同步块</strong>：确保多个线程在第一次创建实例时不发生竞争。只有 <code>instance</code> 为 <code>null</code> 时，才进入同步块。</li><li><strong>第二次检查</strong>：在同步块内部再次检查 <code>instance</code> 是否为空。原因是即使多个线程同时通过第一次检查，进入同步块的线程也只有一个能够执行到创建实例的代码。</li></ul><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式（Proxy Pattern）是一种结构型设计模式，它为其他对象提供一种代理以控制对这个对象的访问。代理对象在客户端和目标对象之间起到中介作用，客户端通过代理对象访问目标对象。代理模式可以用于延迟对象的创建、控制对对象的访问，或者添加额外的功能。</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理由自己手动创建。代理类和目标类实现相同的接口，通过代理类来调用目标类的方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 公共接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title">Service</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">request</span>()</span>;<br>&#125;<br><br><span class="hljs-comment">// 目标类，实际业务逻辑实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">RealService</span> <span class="hljs-title">implements</span> <span class="hljs-title">Service</span> &#123;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Executing request in RealService&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 代理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">ServiceProxy</span> <span class="hljs-title">implements</span> <span class="hljs-title">Service</span> &#123;<br>    <span class="hljs-keyword">private</span> RealService realService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ServiceProxy</span>(<span class="hljs-params">RealService realService</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.realService = realService;<br>    &#125;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Proxy: Before request&quot;</span>);<br>        realService.request();  <span class="hljs-comment">// 调用实际业务逻辑</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Proxy: After request&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>        RealService realService = <span class="hljs-keyword">new</span> RealService();<br>        Service serviceProxy = <span class="hljs-keyword">new</span> ServiceProxy(realService);<br>        serviceProxy.request();  <span class="hljs-comment">// 通过代理访问实际服务</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理是在运行时动态生成代理类，不需要手动编写代理类。Java提供了基于 <code>java.lang.reflect.Proxy</code> 的动态代理机制，代理类可以在运行时动态创建，并通过 <code>InvocationHandler</code> 来拦截方法调用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 公共接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-built_in">void</span> <span class="hljs-title function_">request</span>();<br>&#125;<br><br><span class="hljs-comment">// 目标类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">request</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Executing request in RealService&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 代理类的调用处理器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Object</span> target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">ServiceInvocationHandler</span>(<span class="hljs-title class_">Object</span> target) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">target</span> = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">invoke</span>(<span class="hljs-title class_">Object</span> proxy, <span class="hljs-title class_">Method</span> method, <span class="hljs-title class_">Object</span>[] args) throws <span class="hljs-title class_">Throwable</span> &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Proxy: Before request&quot;</span>);<br>        <span class="hljs-title class_">Object</span> result = method.<span class="hljs-title function_">invoke</span>(target, args);  <span class="hljs-comment">// 调用实际目标对象的方法</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Proxy: After request&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-comment">// 目标对象</span><br>        <span class="hljs-title class_">RealService</span> realService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealService</span>();<br>        <br>        <span class="hljs-comment">// 生成代理对象</span><br>        <span class="hljs-title class_">Service</span> serviceProxy = (<span class="hljs-title class_">Service</span>) <span class="hljs-title class_">Proxy</span>.<span class="hljs-title function_">newProxyInstance</span>(<br>            realService.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getClassLoader</span>(),<br>            realService.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getInterfaces</span>(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceInvocationHandler</span>(realService)<br>        );<br>        <br>        serviceProxy.<span class="hljs-title function_">request</span>();  <span class="hljs-comment">// 通过动态代理访问实际服务</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CGLIB代理"><a href="#CGLIB代理" class="headerlink" title="CGLIB代理"></a><strong>CGLIB代理</strong></h3><p>CGLIB 代理是通过继承的方式为目标对象创建代理，适用于没有实现接口的类。它通过生成目标类的子类来实现代理功能。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 目标类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">request</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Executing request in RealService&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// CGLIB代理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceMethodInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">intercept</span>(<span class="hljs-title class_">Object</span> obj, <span class="hljs-title class_">Method</span> method, <span class="hljs-title class_">Object</span>[] args, <span class="hljs-title class_">MethodProxy</span> proxy) throws <span class="hljs-title class_">Throwable</span> &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;CGLIB Proxy: Before request&quot;</span>);<br>        <span class="hljs-title class_">Object</span> result = proxy.<span class="hljs-title function_">invokeSuper</span>(obj, args);  <span class="hljs-comment">// 调用实际方法</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;CGLIB Proxy: After request&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-comment">// 创建Enhancer对象</span><br>        <span class="hljs-title class_">Enhancer</span> enhancer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        enhancer.<span class="hljs-title function_">setSuperclass</span>(<span class="hljs-title class_">RealService</span>.<span class="hljs-property">class</span>);<br>        enhancer.<span class="hljs-title function_">setCallback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceMethodInterceptor</span>());<br><br>        <span class="hljs-comment">// 创建代理对象</span><br>        <span class="hljs-title class_">RealService</span> serviceProxy = (<span class="hljs-title class_">RealService</span>) enhancer.<span class="hljs-title function_">create</span>();<br>        serviceProxy.<span class="hljs-title function_">request</span>();  <span class="hljs-comment">// 通过CGLIB代理访问实际服务</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式（Strategy Pattern）是一种行为型设计模式，它定义了一系列算法，并将每一个算法封装起来，使它们可以相互替换。</p><p>假设有一个场景：我们想实现一个支付系统，用户可以选择不同的支付方式（如支付宝、微信支付和信用卡支付）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 策略接口：定义支付方式的行为</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentStrategy</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体策略：支付宝支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AliPayStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentStrategy</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Using Alipay to pay &quot;</span> + amount + <span class="hljs-string">&quot; yuan.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体策略：微信支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChatPayStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentStrategy</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Using WeChatPay to pay &quot;</span> + amount + <span class="hljs-string">&quot; yuan.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体策略：信用卡支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreditCardPayStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentStrategy</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Using CreditCard to pay &quot;</span> + amount + <span class="hljs-string">&quot; yuan.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 上下文类：持有策略引用，根据不同策略执行相应的支付操作</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentContext</span> &#123;<br>    <span class="hljs-keyword">private</span> PaymentStrategy paymentStrategy;<br><br>    <span class="hljs-comment">// 设置具体的支付策略</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPaymentStrategy</span><span class="hljs-params">(PaymentStrategy paymentStrategy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.paymentStrategy = paymentStrategy;<br>    &#125;<br><br>    <span class="hljs-comment">// 执行支付</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executePayment</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span> &#123;<br>        paymentStrategy.pay(amount);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PaymentContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentContext</span>();<br><br>        <span class="hljs-comment">// 使用支付宝支付</span><br>        context.setPaymentStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AliPayStrategy</span>());<br>        context.executePayment(<span class="hljs-number">100</span>);  <span class="hljs-comment">// 输出: Using Alipay to pay 100 yuan.</span><br><br>        <span class="hljs-comment">// 使用微信支付</span><br>        context.setPaymentStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeChatPayStrategy</span>());<br>        context.executePayment(<span class="hljs-number">200</span>);  <span class="hljs-comment">// 输出: Using WeChatPay to pay 200 yuan.</span><br><br>        <span class="hljs-comment">// 使用信用卡支付</span><br>        context.setPaymentStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CreditCardPayStrategy</span>());<br>        context.executePayment(<span class="hljs-number">300</span>);  <span class="hljs-comment">// 输出: Using CreditCard to pay 300 yuan.</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="模版方法模式"><a href="#模版方法模式" class="headerlink" title="模版方法模式"></a>模版方法模式</h2><p>在模板方法模式中，父类提供一个模板方法，定义了算法的骨架，具体的实现步骤由子类提供。它是一种<strong>代码复用</strong>的有效手段，适用于算法结构固定而部分实现不同的场景。</p><p><strong>抽象类（AbstractClass）</strong>：定义模板方法，确定算法的骨架，并且包含算法中的某些步骤的具体实现或抽象方法。</p><p><strong>具体类（ConcreteClass）</strong>：实现抽象类中定义的抽象方法，完成算法中的具体步骤。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 抽象类：饮料</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Beverage</span> &#123;<br>    <br>    <span class="hljs-comment">// 模板方法：制作饮料的流程</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> final <span class="hljs-keyword">void</span> <span class="hljs-title">prepareBeverage</span>()</span> &#123;<br>        boilWater();<br>        brew();         <span class="hljs-comment">// 抽象方法，由子类实现</span><br>        pourInCup();<br>        <span class="hljs-keyword">if</span> (needsCondiments()) &#123; <span class="hljs-comment">// 钩子方法，子类可以选择性地覆写</span><br>            addCondiments();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 具体实现：烧水</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">boilWater</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Boiling water&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 具体实现：倒入杯中</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pourInCup</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Pouring into cup&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 抽象方法：泡制饮料</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">brew</span>()</span>;<br><br>    <span class="hljs-comment">// 抽象方法：添加调料</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span>()</span>;<br><br>    <span class="hljs-comment">// 钩子方法：是否需要添加调料，默认需要，子类可以覆盖</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">needsCondiments</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体类：茶</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Tea</span> <span class="hljs-title">extends</span> <span class="hljs-title">Beverage</span> &#123;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">brew</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Steeping the tea&quot;</span>);<br>    &#125;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Adding lemon&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体类：咖啡</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Coffee</span> <span class="hljs-title">extends</span> <span class="hljs-title">Beverage</span> &#123;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">brew</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Dripping coffee through filter&quot;</span>);<br>    &#125;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Adding sugar and milk&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 覆盖钩子方法：不需要调料</span><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">needsCondiments</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>        Beverage tea = <span class="hljs-keyword">new</span> Tea();<br>        tea.prepareBeverage();<br>        <span class="hljs-comment">// 输出:</span><br>        <span class="hljs-comment">// Boiling water</span><br>        <span class="hljs-comment">// Steeping the tea</span><br>        <span class="hljs-comment">// Pouring into cup</span><br>        <span class="hljs-comment">// Adding lemon</span><br><br>        Beverage coffee = <span class="hljs-keyword">new</span> Coffee();<br>        coffee.prepareBeverage();<br>        <span class="hljs-comment">// 输出:</span><br>        <span class="hljs-comment">// Boiling water</span><br>        <span class="hljs-comment">// Dripping coffee through filter</span><br>        <span class="hljs-comment">// Pouring into cup</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客报告</title>
    <link href="/2024/04/22/%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
    <url>/2024/04/22/%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="博客网站搭建指南报告"><a href="#博客网站搭建指南报告" class="headerlink" title="博客网站搭建指南报告"></a>博客网站搭建指南报告</h2><h4 id="选择博客模版"><a href="#选择博客模版" class="headerlink" title="选择博客模版"></a>选择博客模版</h4><p>本文选择的模版为：Hexo[<a href="https://hexo.io/zh-cn/]">https://hexo.io/zh-cn/]</a></p><h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><ol><li>Git</li><li>Node.js</li></ol><h4 id="下载Hexo"><a href="#下载Hexo" class="headerlink" title="下载Hexo"></a>下载Hexo</h4><p>在自己想要安装的目录下，通过cmd用npm安装hexo并初始化本地博客文件夹</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">npm install hexo-cli -g<br>hexo init ***<span class="hljs-string">.github.io</span>  <span class="hljs-comment"># 这里替换成你自己的，为后续更新到github上，使用github名字.github,io</span><br><span class="hljs-keyword">cd</span> ***<span class="hljs-string">.github.io</span>  <span class="hljs-comment"># 进入本地的博客文件夹</span><br>npm install<br>hexo server <span class="hljs-comment"># 打开本地服务器预览</span><br></code></pre></td></tr></table></figure><p>之后通过浏览器查看<a href="https://link.zhihu.com/?spm=a2c6h.12873639.article-detail.9.37aa2846P2lC0y&target=http://localhost:4000/">http://localhost:4000/</a>是否成功</p><h4 id="选择博客主题"><a href="#选择博客主题" class="headerlink" title="选择博客主题"></a>选择博客主题</h4><p><a href="https://hexo.io/themes/">hexo主题官网</a></p><p>本文选择的主题为Fluid，安装Fluid进入自己的博客目录执行一下命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>之前创建的博客目录下创建 _config.fluid.yml，将该<strong>主题下</strong>的 _config.yml 内容复制进去。<strong>注意这里得复制Fluid在GIthub中的 _config.yml ，而不是我们博客下的 _config.yml 文件！！！</strong></p><h4 id="配置Fluid"><a href="#配置Fluid" class="headerlink" title="配置Fluid"></a>配置Fluid</h4><p>修改博客目录中的 _config.yml，修改两个字段：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定中文</span><br><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br></code></pre></td></tr></table></figure><p><a href="https://fluid-dev.github.io/hexo-fluid-docs/">其他配置参考官网：Fluid用户手册</a></p><h4 id="更新部署博客页面指令"><a href="#更新部署博客页面指令" class="headerlink" title="更新部署博客页面指令"></a>更新部署博客页面指令</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean  <span class="hljs-comment"># 清空一下缓存，有时候博客页面显示不正常也可以试试这个命令行</span><br><span class="hljs-variable">$ </span>hexo g  <span class="hljs-comment"># hexo generate的简写，把刚刚做的改动生成更新一下</span><br><span class="hljs-variable">$ </span>hexo server  <span class="hljs-comment"># 在本地服务器看看博客有没有更新成NexT主题：https://localhost:4000</span><br></code></pre></td></tr></table></figure><h4 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h4><p>修改博客根目录下的_config.yml文件中的deploy</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:qzkq/qzkq.github.io.git  <span class="hljs-meta"># 这里我用的是ssh，也可以用https，可能会报错，设置token即可</span><br><span class="hljs-symbol">  branch:</span> main  <span class="hljs-meta"># 注意自己创建的分支，我的是main，有可能是master</span><br></code></pre></td></tr></table></figure><p>安装hexo-deployer-git自动部署发布工具，将hexo 部署到 git page 的 deployer</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br>hexo d  <span class="hljs-comment"># hexo deploy，如果本地服务器没问题就可以上传到github上</span><br></code></pre></td></tr></table></figure><p>更新博客之后，可以通过如下命令就行上传github</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g      <span class="hljs-comment"># 是hexo generate的简写，把刚刚做的改动生成更新一下</span><br><span class="hljs-variable">$ </span>hexo server <span class="hljs-comment"># 在本地服务器看看博客有没有更新成NexT主题：https://localhost:4000</span><br><span class="hljs-variable">$ </span>hexo d      <span class="hljs-comment"># hexo deploy，如果本地服务器看了没问题就可以上传到github网站</span><br></code></pre></td></tr></table></figure><h4 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h4><p>通过一下命令，创建新的博客</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p><a href="https://hexo.io/zh-cn/docs/writing">详细配置</a></p>]]></content>
    
    
    <categories>
      
      <category>HomeWork</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac install pytorch</title>
    <link href="/2024/04/15/Mac-install-pytorch/"/>
    <url>/2024/04/15/Mac-install-pytorch/</url>
    
    <content type="html"><![CDATA[<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p><a href="https://www.anaconda.com/#">Anaconda</a>：可以创建一个个不同的环境把这些包分开，比如需要一个tensorflow的环境，那就创建一个环境在这个环境内下载安装tensorflow，然后另一个环境装pytorch。</p><h3 id="Pytorch安装"><a href="#Pytorch安装" class="headerlink" title="Pytorch安装"></a>Pytorch安装</h3><h4 id="创建新的虚拟环境"><a href="#创建新的虚拟环境" class="headerlink" title="创建新的虚拟环境"></a>创建新的虚拟环境</h4><p>不同的项目可能需要的软件及包环境版本不同，所以需要配置不同的虚拟环境。</p><p>创建虚拟环境：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">conda create -<span class="hljs-built_in">n</span> 环境名<br></code></pre></td></tr></table></figure><p>退出当前环境：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">conda deactivate</span><br></code></pre></td></tr></table></figure><h4 id="进入环境安装所需软件和包"><a href="#进入环境安装所需软件和包" class="headerlink" title="进入环境安装所需软件和包"></a>进入环境安装所需软件和包</h4><ol><li><p>进入环境</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">conda <span class="hljs-built_in">activate</span> 环境名<br></code></pre></td></tr></table></figure></li><li><p>查看环境中的包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">conda list</span><br></code></pre></td></tr></table></figure></li><li><p>用Conda安装所需包：如安装python</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">conda install python<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">3.8</span><br></code></pre></td></tr></table></figure></li><li><p>进入pytorch官网，选择自己系统对应的pytorch<a href="https://pytorch.org/get-started/locally/">Pytorch官网地址</a></p></li><li><p>删除命令</p><p>删除环境：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">conda <span class="hljs-keyword">remove</span> -n env_name --all <span class="hljs-comment"># env_name用要删除的虚拟环境的名字替换即可</span><br></code></pre></td></tr></table></figure><p>删除环境中的包</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">conda <span class="hljs-keyword">remove</span> package_name <span class="hljs-comment"># package_name用要删除的包的名字替换</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>工具命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora使用基础命令</title>
    <link href="/2024/04/13/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/13/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><ul><li><p>标题级数：cmd + 1—6</p></li><li><p>正文：cmd + 0</p></li><li><p>斜体：cmd + I</p></li><li><p>粗体：cmd + B</p></li><li><p>有&#x2F;无序列表：Option + Cmd + U&#x2F;O</p><ol><li>想要子列表： 按 Tab</li><li>回到上一层：shift+Tab</li></ol></li><li><p>任务列表：Option + Cmd + X</p></li><li><p>分割线：— + Enter</p></li><li><p>超链接：Cmd + K</p></li><li><p>代码块：Option + Cmd + C</p></li><li><p>公式块：Option + Cmd + B</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/12/hello-world/"/>
    <url>/2024/04/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
